version: '3.8'

services:
  localstack:
    container_name: localstack
    image: localstack/localstack:3.3.0
    ports:
      - "4566:4566"
    environment:
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SERVICES=lambda,apigateway,cloudwatch,s3,iam,logs,route53
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - LAMBDA_EXECUTOR=local
      - LAMBDA_REMOTE_DOCKER=false
      - HOSTNAME_EXTERNAL=localstack
      - SKIP_DIRECTORY_CLEANUP=1
      - GATEWAY_LISTEN=0.0.0.0:4566
      - GATEWAY_FORWARD=


      
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./lambda:/opt/lambda"
    networks:
      - local-aws-network

  postgres:
    container_name: postgres
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=licenseplate_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - local-aws-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - local-aws-network

  lambda-deps:
    container_name: lambda-deps
    image: python:3.9
    volumes:
      - ./lambda:/lambda
      - ./packages:/packages
    working_dir: /lambda
    command: >
      bash -c "
        # Instalar herramienta zip
        apt-get update && apt-get install -y zip &&
        
        # Preparamos los directorios para las funciones Lambda
        mkdir -p /packages/process_readings /packages/query_metrics &&
        
        # Copiamos el c√≥digo fuente a los directorios de paquetes
        cp /lambda/process_readings/app.py /packages/process_readings/ &&
        cp /lambda/query_metrics/app.py /packages/query_metrics/ &&
        
        # Instalamos las dependencias para process_readings
        cd /packages/process_readings &&
        pip install --platform manylinux2014_x86_64 --implementation cp --python 3.9 --only-binary=:all: --upgrade -r /lambda/process_readings/requirements.txt -t . &&
        
        # Instalamos las dependencias para query_metrics
        cd /packages/query_metrics &&
        pip install --platform manylinux2014_x86_64 --implementation cp --python 3.9 --only-binary=:all: --upgrade -r /lambda/query_metrics/requirements.txt -t . &&
        
        # Eliminamos archivos ZIP existentes para evitar problemas con actualizaciones
        rm -f /packages/process_readings.zip /packages/query_metrics.zip &&
        
        # Creamos los archivos ZIP para las funciones Lambda
        cd /packages/process_readings && zip -r /packages/process_readings.zip . &&
        cd /packages/query_metrics && zip -r /packages/query_metrics.zip ."
        
  terraform:
    container_name: terraform
    image: hashicorp/terraform:latest
    volumes:
      - ./terraform:/terraform
      - ./lambda:/lambda
      - ./packages:/packages
    working_dir: /terraform
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - TF_CLI_ARGS=-no-color
    depends_on:
      - localstack
      - postgres
      - lambda-deps
    networks:
      - local-aws-network
    entrypoint: ["sh", "-c", "sleep 10 && terraform init && terraform apply -auto-approve"]

networks:
  local-aws-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data: